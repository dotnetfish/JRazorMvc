package com.superstudio.web.mvc.actionresult;import java.io.IOException;import java.io.Writer;import java.util.HashMap;import java.util.Map;import com.superstudio.commons.exception.ArgumentException;import com.superstudio.commons.exception.ArgumentNullException;import com.superstudio.commons.exception.InvalidOperationException;import com.superstudio.web.mvc.IView;import com.superstudio.web.mvc.context.ControllerContext;import com.superstudio.web.mvc.viewEngine.ViewEngines;import com.superstudio.commons.csharpbridge.StringHelper;public abstract class ViewResultBase extends ActionResult {	private Map<String, Object> _dynamicViewData;	private Map<String, Object> _tempData;	private ViewDataDictionary _viewData;	private ViewEngineCollection _viewEngineCollection;	private String _viewName;	private Object model;	public Map<String, Object> getTempData() {		if (_tempData == null) {			_tempData = new HashMap<String, Object>();		}		return _tempData;	}	public void setTempData(Map<String, Object> tempData) {		_tempData = tempData;	}	private IView view;	public Map<String, Object> ViewBag;	public ViewDataDictionary getViewData()	{		if (_viewData == null) {			_viewData = new ViewDataDictionary(null);		}		return _viewData;	}	public void setViewData(ViewDataDictionary value) {		_viewData = value;	}	public ViewEngineCollection getViewEngine() {		return _viewEngineCollection == null ? ViewEngines.Engines : _viewEngineCollection;	}	public void setViewEngine(ViewEngineCollection value) {		_viewEngineCollection = value;	}	private String viewName;	public String getViewName() {		return viewName;	}	public void setViewName(String viewName) {		this.viewName = viewName;	}	@Override	public void execute(ControllerContext context) throws IOException, ArgumentNullException, InvalidOperationException,			ArgumentException, InstantiationException, IllegalAccessException, ClassNotFoundException {		if (context == null) {			throw new ArgumentNullException("context");		}		if (StringHelper.isNullOrEmpty(getViewName())) {			viewName = context.getRouteData().getRequiredString("action");		}		ViewEngineResult result = null;		if (view == null) {			result = findView(context);			view = result.getView();		}		Writer writer = context.getHttpContext().getResponse().getWriter();		ViewContext viewContext = new ViewContext(context, view, _viewData, getTempData(), writer);		view.render(viewContext, writer);		if (result != null) {			result.getViewEngine().releaseView(context, view);		}	}	protected abstract ViewEngineResult findView(ControllerContext context)			throws InvalidOperationException, ArgumentNullException, ArgumentException, InstantiationException,			IllegalAccessException, ClassNotFoundException;	public Object getModel() {		return model;	}	public void setModel(Object model) {		this.model = model;	}}